rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (get): Any authenticated user can read any user profile.
     * @allow (create): Only the authenticated user can create their own profile.
     * @allow (update): Only the authenticated user can update their own profile.
     * @allow (delete): Only the authenticated user can delete their own profile.
     * @deny (get): Not applicable.
     * @deny (create): Fails if the user attempts to create a profile with a different user ID.
     * @deny (update): Fails if the user attempts to update someone else's profile.
     * @deny (delete): Fails if the user attempts to delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn();
      allow list: if false; // Prevent user listing for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to FCM tokens for a specific user.
     * @path /users/{userId}/fcmTokens/{tokenId}
     * @allow (create): Only the authenticated user can create tokens for their own profile.
     * @allow (update): Only the authenticated user can update tokens for their own profile.
     * @allow (delete): Only the authenticated user can delete tokens for their own profile.
     * @allow (list): Only the authenticated user can list tokens for their own profile.
     * @allow (get): Only the authenticated user can get tokens for their own profile.
     * @deny (create): Fails if the user attempts to create a token for a different user ID.
     * @deny (update): Fails if the user attempts to update someone else's tokens.
     * @deny (delete): Fails if the user attempts to delete someone else's tokens.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/fcmTokens/{tokenId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to user notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create): Not applicable (notifications are likely created by a backend function).
     * @allow (update): Only the authenticated user can update their own notifications (e.g., mark as read).
     * @allow (delete): Only the authenticated user can delete their own notifications.
     * @allow (list): Only the authenticated user can list their own notifications.
     * @allow (get): Only the authenticated user can get their own notifications.
     * @deny (create): Always deny direct client-side creation.
     * @deny (update): Fails if the user attempts to update someone else's notifications.
     * @deny (delete): Fails if the user attempts to delete someone else's notifications.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if false;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to player profiles.
     * @path /players/{playerId}
     * @allow (get): Any authenticated user can read any player profile.
     * @allow (create): Only the authenticated user can create their own player profile.
     * @allow (update): Only the authenticated user can update their own player profile.
     * @allow (delete): Only the authenticated user can delete their own player profile.
     * @deny (get): Not applicable.
     * @deny (create): Fails if the user attempts to create a profile with a different player ID.
     * @deny (update): Fails if the user attempts to update someone else's player profile.
     * @deny (delete): Fails if the user attempts to delete someone else's player profile.
     * @principle Enforces document ownership for writes.
     */
    match /players/{playerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(playerId) {
        return request.auth.uid == playerId;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(playerId);
      allow update: if isSignedIn() && isOwner(playerId);
      allow delete: if isSignedIn() && isOwner(playerId);
    }

      /**
       * @description Grants access to OVR history for a player.
       * @path /players/{playerId}/ovrHistory/{historyId}
       * @allow (get): Only the owner can read the OVR history.
       * @allow (create): Only the owner can create history entries.
       * @allow (update): Only the owner can update history entries.
       * @allow (delete): Only the owner can delete history entries.
       * @deny (create): Fails if the ownerUid doesn't match the playerId.
       * @deny (update): Fails if the ownerUid is changed.
       * @deny (delete): Fails if not the owner.
       * @principle Enforces document ownership for OVR history.
       */
    match /players/{playerId}/ovrHistory/{historyId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(playerId) {
            return request.auth.uid == playerId;
        }

        allow get: if isSignedIn() && isOwner(playerId);
        allow list: if isSignedIn() && isOwner(playerId);
        allow create: if isSignedIn() && isOwner(playerId);
        allow update: if isSignedIn() && isOwner(playerId);
        allow delete: if isSignedIn() && isOwner(playerId);
    }

    /**
     * @description Grants access to group profiles.
     * @path /groups/{groupId}
     * @allow (get): Any authenticated user can read any group profile.
     * @allow (create): Only the authenticated user can create a group profile.
     * @allow (update): Only the owner can update the group profile.
     * @allow (delete): Only the owner can delete the group profile.
     * @deny (create): Requires authentication.
     * @deny (update): Requires ownership.
     * @deny (delete): Requires ownership.
     * @principle Enforces group ownership for writes, allows public reads.
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
    }

    /**
     * @description Grants access to match data.
     * @path /matches/{matchId}
     * @allow (get): Any authenticated user can read any match.
     * @allow (create): Only authenticated users can create matches, requires ownerUid in data.
     * @allow (update): Only the owner can update the match.
     * @allow (delete): Only the owner can delete the match.
     * @deny (create): Requires authentication and valid data.
     * @deny (update): Requires ownership.
     * @deny (delete): Requires ownership.
     * @principle Enforces match ownership for writes, allows public reads.
     */
    match /matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['ownerUid']);
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
    }

    /**
     * @description Grants access to evaluation assignments for a specific match.
     * @path /matches/{matchId}/assignments/{assignmentId}
     * @allow (get): Any authenticated user can read any evaluation assignment.
     * @allow (create): Only the assigned evaluator can create evaluation assignments.
     * @allow (update): Not allowed.
     * @allow (delete): Not allowed.
     * @deny (create): Fails if the user is not the assigned evaluator.
     * @principle Enforces that only assigned evaluators can create evaluations.
     */
    match /matches/{matchId}/assignments/{assignmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['evaluatorUid']) && request.auth.uid == request.resource.data.evaluatorUid;
      allow update: if false;
      allow delete: if false;
    }
    
     /**
      * @description Grants access to player's self-evaluations for a match.
      * @path /matches/{matchId}/selfEvaluations/{userId}
      * @allow (get): Only the user can read their own self-evaluation.
      * @allow (create): Only the user can create their own self-evaluation.
      * @allow (update): Only the user can update their own self-evaluation.
      * @allow (delete): Only the user can delete their own self-evaluation.
      * @deny (create): Fails if the user is not the owner.
      * @deny (update): Fails if the user is not the owner.
      * @deny (delete): Fails if the user is not the owner.
      * @principle Enforces document ownership for self-evaluations.
      */
    match /matches/{matchId}/selfEvaluations/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to chat messages for a specific match.
     * @path /matches/{matchId}/messages/{messageId}
     * @allow (get): Any authenticated user can read chat messages.
     * @allow (create): Only authenticated users can create chat messages.
     * @allow (update): Not allowed.
     * @allow (delete): Not allowed.
     * @deny (create): Requires authentication.
     * @principle Allows public read access, restricts write access to authenticated users.
     */
    match /matches/{matchId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to evaluation records.
     * @path /evaluations/{evaluationId}
     * @allow (get): Any authenticated user can read any evaluation.
     * @allow (create): Only the authenticated user can create evaluations.
     * @allow (update): Only the authenticated user can update evaluations.
     * @allow (delete): Only the authenticated user can delete evaluations.
     * @deny (create): Requires authentication.
     * @deny (update): Requires ownership.
     * @deny (delete): Requires ownership.
     * @principle Enforces evaluation ownership for writes.
     */
    match /evaluations/{evaluationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['ownerUid']);
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
    }
  }
}