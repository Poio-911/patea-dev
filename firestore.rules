rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc' and the uid field in the document is also 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their profile.
     * @allow (update) User with UID 'user_abc' can update their profile.
     * @allow (delete) User with UID 'user_abc' can delete their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read user 'user_abc' profile.
     * @deny (update) User with UID 'user_xyz' cannot update user 'user_abc' profile.
     * @deny (delete) User with UID 'user_xyz' cannot delete user 'user_abc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile, enforcing that the UID in the document matches the path.
      allow create: if request.auth.uid == userId;

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Allow a user to update their own profile.
      allow update: if isOwner(userId);

      // Allow a user to delete their own profile.
      allow delete: if isOwner(userId);

      // Listing users is not allowed.
      allow list: if false;
    }

    /**
     * @description Controls access to FCM tokens for a user.
     * @path /users/{userId}/fcmTokens/{tokenId}
     * @allow (create) User with UID 'user_abc' can create an FCM token.
     * @allow (get) User with UID 'user_abc' can read their FCM tokens.
     * @allow (update) User with UID 'user_abc' can update their FCM tokens.
     * @allow (delete) User with UID 'user_abc' can delete their FCM tokens.
     * @deny (create) User with UID 'user_xyz' cannot create FCM tokens for user 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read FCM tokens for user 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update FCM tokens for user 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete FCM tokens for user 'user_abc'.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/fcmTokens/{tokenId} {
      // Helper function to check if the user is signed in and is the owner of the parent user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create an FCM token.
      allow create: if isOwner(userId);

      // Allow a user to read their FCM tokens.
      allow get: if isOwner(userId);

      // Allow a user to update their FCM tokens.
      allow update: if isOwner(userId);

      // Allow a user to delete their FCM tokens.
      allow delete: if isOwner(userId);

      // Allow a user to list their FCM tokens.
      allow list: if isOwner(userId);
    }

    /**
     * @description Controls access to notifications for a user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user_abc' can create a notification.
     * @allow (get) User with UID 'user_abc' can read their notifications.
     * @allow (update) User with UID 'user_abc' can update their notifications.
     * @allow (delete) User with UID 'user_abc' can delete their notifications.
     * @deny (create) User with UID 'user_xyz' cannot create notifications for user 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read notifications for user 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update notifications for user 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete notifications for user 'user_abc'.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/notifications/{notificationId} {
      // Helper function to check if the user is signed in and is the owner of the parent user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create a notification.
      allow create: if isOwner(userId);

      // Allow a user to read their notifications.
      allow get: if isOwner(userId);

      // Allow a user to update their notifications.
      allow update: if isOwner(userId);

      // Allow a user to delete their notifications.
      allow delete: if isOwner(userId);

      // Allow a user to list their notifications.
      allow list: if isOwner(userId);
    }

    /**
     * @description Controls access to player data.
     * @path /players/{playerId}
     * @allow (create) Authenticated user can create a player document if the ownerUid field matches their UID.
     * @allow (get) Any authenticated user can read player data.
     * @allow (update) Authenticated user with matching UID can update the player data.
     * @allow (delete) Authenticated user with matching UID can delete the player data.
     * @deny (create) User cannot create a player document with an ownerUid that doesn't match their UID.
     * @deny (update) User without matching UID cannot update player data.
     * @deny (delete) User without matching UID cannot delete player data.
     * @principle Enforces document ownership for writes.
     */
    match /players/{playerId} {
        // Helper function to check if the user is signed in and is the owner of the document.
        function isOwner(ownerUid) {
            return request.auth != null && request.auth.uid == ownerUid;
        }

        // Allow any authenticated user to read a player's data.
        allow get: if request.auth != null;

        // Allow listing of players
        allow list: if request.auth != null;

        // Allow an authenticated user to create a player document if the ownerUid field matches their UID
        allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;

        // Allow an authenticated user to update a player document if the ownerUid field matches their UID.
        allow update: if isOwner(resource.data.ownerUid);

        // Allow an authenticated user to delete a player document if the ownerUid field matches their UID.
        allow delete: if isOwner(resource.data.ownerUid);
    }

   /**
     * @description Controls access to OVR history for a player.
     * @path /players/{playerId}/ovrHistory/{historyId}
     * @allow (create) Authenticated user can create an OVR history entry if they own the player document.
     * @allow (get) Any authenticated user can read OVR history data.
     * @allow (update) Authenticated user with matching UID can update the OVR history data.
     * @allow (delete) Authenticated user with matching UID can delete the OVR history data.
     * @deny (create) User cannot create an OVR history entry if they don't own the player document.
     * @deny (update) User without matching UID cannot update OVR history data.
     * @deny (delete) User without matching UID cannot delete OVR history data.
     * @principle Enforces document ownership for writes.
     */
    match /players/{playerId}/ovrHistory/{historyId} {
        // Helper function to check if the user is signed in and is the owner of the parent player document.
        function isOwner(playerId) {
            return request.auth != null && get(/databases/$(database)/documents/players/$(playerId)).data.ownerUid == request.auth.uid;
        }

        // Allow any authenticated user to read an OVR history entry.
        allow get: if request.auth != null;

        // Allow an authenticated user to create an OVR history entry if they own the player document.
        allow create: if isOwner(playerId);

        // Allow an authenticated user to update an OVR history entry if they own the player document.
        allow update: if isOwner(playerId);

        // Allow an authenticated user to delete an OVR history entry if they own the player document.
        allow delete: if isOwner(playerId);

        // Allow any authenticated user to list an OVR history entries.
        allow list: if request.auth != null;
    }

    /**
     * @description Controls access to group data.
     * @path /groups/{groupId}
     * @allow (create) Authenticated user can create a group if the ownerUid field matches their UID.
     * @allow (get) Any authenticated user can read group data.
     * @allow (update) Authenticated user with matching UID can update the group data.
     * @allow (delete) Authenticated user with matching UID can delete the group data.
     * @deny (create) User cannot create a group with an ownerUid that doesn't match their UID.
     * @deny (update) User without matching UID cannot update group data.
     * @deny (delete) User without matching UID cannot delete group data.
     * @principle Enforces document ownership for writes.
     */
    match /groups/{groupId} {
        // Helper function to check if the user is signed in and is the owner of the document.
        function isOwner(groupId) {
            return request.auth != null && get(/databases/$(database)/documents/groups/$(groupId)).data.ownerUid == request.auth.uid;
        }

        // Allow any authenticated user to read a group's data.
        allow get: if request.auth != null;

        // Allow an authenticated user to create a group document if the ownerUid field matches their UID.
        allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;

        // Allow an authenticated user to update a group document if they are the owner.
        allow update: if isOwner(groupId);

        // Allow an authenticated user to delete a group document if they are the owner.
        allow delete: if isOwner(groupId);

        // Allow any authenticated user to list groups.
        allow list: if request.auth != null;
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (create) Authenticated user can create a match if the ownerUid field matches their UID.
     * @allow (get) Any user can read match data.
     * @allow (update) Authenticated user with matching UID can update the match data.
     * @allow (delete) Authenticated user with matching UID can delete the match data.
     * @deny (create) User cannot create a match with an ownerUid that doesn't match their UID.
     * @deny (update) User without matching UID cannot update match data.
     * @deny (delete) User without matching UID cannot delete match data.
     * @principle Enforces document ownership for writes.
     */
    match /matches/{matchId} {
        // Helper function to check if the user is signed in and is the owner of the document.
        function isOwner(matchId) {
            return request.auth != null && get(/databases/$(database)/documents/matches/$(matchId)).data.ownerUid == request.auth.uid;
        }

        // Allow any user to read a match's data.
        allow get: if true;

        // Allow anyone to list matches.
        allow list: if true;

        // Allow an authenticated user to create a match document if the ownerUid field matches their UID.
        allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;

        // Allow an authenticated user to update a match document if they are the owner.
        allow update: if isOwner(matchId);

        // Allow an authenticated user to delete a match document if they are the owner.
        allow delete: if isOwner(matchId);
    }

    /**
     * @description Controls access to evaluation assignments for a match.
     * @path /matches/{matchId}/assignments/{assignmentId}
     * @allow (create) Authenticated user can create an assignment if they own the match.
     * @allow (get) Any authenticated user can read an assignment.
     * @allow (update) Authenticated user with matching UID can update the assignment data if they own the match.
     * @allow (delete) Authenticated user with matching UID can delete the assignment if they own the match.
     * @deny (create) User cannot create an assignment if they don't own the match.
     * @deny (update) User without matching UID cannot update assignment data.
     * @deny (delete) User without matching UID cannot delete assignment data.
     * @principle Enforces document ownership for writes.
     */
    match /matches/{matchId}/assignments/{assignmentId} {
        // Helper function to check if the user is signed in and is the owner of the parent match document.
        function isOwner(matchId) {
            return request.auth != null && get(/databases/$(database)/documents/matches/$(matchId)).data.ownerUid == request.auth.uid;
        }

        // Allow any authenticated user to read an evaluation assignment.
        allow get: if request.auth != null;

        // Allow an authenticated user to create an evaluation assignment if they own the match.
        allow create: if isOwner(matchId);

        // Allow an authenticated user to update an evaluation assignment if they own the match.
        allow update: if isOwner(matchId);

        // Allow an authenticated user to delete an evaluation assignment if they own the match.
        allow delete: if isOwner(matchId);

        // Allow any authenticated user to list evaluation assignments.
        allow list: if request.auth != null;
    }

    /**
     * @description Controls access to self-reported evaluations for a match.
     * @path /matches/{matchId}/selfEvaluations/{userId}
     * @allow (create) Authenticated user can create a self-evaluation if their UID matches the userId and they are a player in the match.
     * @allow (get) Authenticated user can read a self-evaluation if their UID matches the userId and they are a player in the match.
     * @allow (update) Authenticated user can update their own self-evaluation if their UID matches the userId and they are a player in the match.
     * @allow (delete) Authenticated user can delete their own self-evaluation if their UID matches the userId and they are a player in the match.
     * @deny (create) User cannot create a self-evaluation for another user or if they are not in the match.
     * @deny (get) User cannot read a self-evaluation for another user or if they are not in the match.
     * @deny (update) User cannot update a self-evaluation for another user or if they are not in the match.
     * @deny (delete) User cannot delete a self-evaluation for another user or if they are not in the match.
     * @principle Enforces user-specific data access and validates match participation.
     */
    match /matches/{matchId}/selfEvaluations/{userId} {
        // Helper function to check if the user is signed in, their UID matches the userId, and they are a player in the match.
        function isPlayerInMatch(matchId, userId) {
            return request.auth != null && request.auth.uid == userId && get(/databases/$(database)/documents/matches/$(matchId)).data.playerUids.hasAny([userId]);
        }

        // Allow an authenticated user to create their own self-evaluation if they are a player in the match.
        allow create: if isPlayerInMatch(matchId, userId);

        // Allow an authenticated user to read their own self-evaluation if they are a player in the match.
        allow get: if isPlayerInMatch(matchId, userId);

        // Allow an authenticated user to update their own self-evaluation if they are a player in the match.
        allow update: if isPlayerInMatch(matchId, userId);

        // Allow an authenticated user to delete their own self-evaluation if they are a player in the match.
        allow delete: if isPlayerInMatch(matchId, userId);

        // Allow any authenticated user to list self evaluations.
        allow list: if request.auth != null;
    }

    /**
     * @description Controls access to chat messages for a match.
     * @path /matches/{matchId}/messages/{messageId}
     * @allow (create) Any authenticated user can create a message if they are a player in the match.
     * @allow (get) Any authenticated user can read a message.
     * @allow (update) No one can update a message.
     * @allow (delete) No one can delete a message.
     * @deny (create) User cannot create a message if they are not in the match.
     * @principle Enforces match participation for creating messages.
     */
    match /matches/{matchId}/messages/{messageId} {
        // Helper function to check if the user is signed in and is a player in the match.
        function isPlayerInMatch(matchId) {
            return request.auth != null && get(/databases/$(database)/documents/matches/$(matchId)).data.playerUids.hasAny([request.auth.uid]);
        }

        // Allow any authenticated user to read a chat message.
        allow get: if request.auth != null;

        // Allow an authenticated user to create a chat message if they are a player in the match.
        allow create: if isPlayerInMatch(matchId);

        // No one can update a chat message.
        allow update: if false;

        // No one can delete a chat message.
        allow delete: if false;

        // Allow any authenticated user to list chat messages.
        allow list: if request.auth != null;
    }

    /**
     * @description Controls access to evaluation data.
     * @path /evaluations/{evaluationId}
     * @allow (create) Authenticated user can create an evaluation if they are assigned to evaluate the player.
     * @allow (get) Authenticated user can read an evaluation if they are the evaluator or the evaluated player.
     * @allow (update) No one can update an evaluation.
     * @allow (delete) No one can delete an evaluation.
     * @deny (create) User cannot create an evaluation if they are not assigned to evaluate the player.
     * @deny (get) User cannot read an evaluation if they are not the evaluator or the evaluated player.
     * @principle Enforces evaluation assignment for creation and restricts access to relevant parties.
     */
    match /evaluations/{evaluationId} {
        // Helper function to check if the user is signed in and is assigned to evaluate the player.
        function isAssignedEvaluator(evaluationId) {
            return request.auth != null && get(/databases/$(database)/documents/evaluations/$(evaluationId)).data.evaluatorId == request.auth.uid;
        }

        // Helper function to check if the user is the evaluator or the evaluated player.
        function isEvaluatorOrEvaluated(evaluationId) {
            return request.auth != null && (get(/databases/$(database)/documents/evaluations/$(evaluationId)).data.evaluatorId == request.auth.uid || get(/databases/$(database)/documents/evaluations/$(evaluationId)).data.playerId == request.auth.uid);
        }

        // Allow an authenticated user to create an evaluation if they are assigned to evaluate the player.
        allow create: if isAssignedEvaluator(evaluationId);

        // Allow an authenticated user to read an evaluation if they are the evaluator or the evaluated player.
        allow get: if isEvaluatorOrEvaluated(evaluationId);

        // No one can update an evaluation.
        allow update: if false;

        // No one can delete an evaluation.
        allow delete: if false;

        // Allow any authenticated user to list evaluations.
        allow list: if request.auth != null;
    }
  }
}