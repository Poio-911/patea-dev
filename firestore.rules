/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data,
 * and a group-ownership model for shared resources like matches and players.
 * It prioritizes secure access control while allowing flexible data structures
 * for rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Public user profiles, accessible to anyone, but only
 *   creatable by the user themselves.
 * - `/users/{userId}/fcmTokens/{tokenId}`: FCM tokens for a user, accessible only to the user.
 * - `/users/{userId}/notifications/{notificationId}`: Notifications for a user, accessible only to the user.
 * - `/players/{playerId}`: Player profiles, owned by a user and associated with a group.
 * - `/players/{playerId}/ovrHistory/{historyId}`: OVR history for a player, accessible only to the player's owner.
 * - `/groups/{groupId}`: Group data, with ownership and membership control.
 * - `/matches/{matchId}`: Match data, associated with a group and owned by a user.
 * - `/matches/{matchId}/assignments/{assignmentId}`: Evaluation assignments for a match.
 * - `/matches/{matchId}/selfEvaluations/{userId}`: Self-evaluations for a match.
 * - `/matches/{matchId}/messages/{messageId}`: Chat messages for a match.
 * - `/evaluations/{evaluationId}`: Individual evaluation records.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - Public read access is granted only where explicitly intended (e.g., user profiles).
 * - Data validation is minimized in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - Player documents contain `ownerUid` and `groupId` fields to simplify access control for players and related data.
 * - Match documents also contain `ownerUid` and `groupId` fields for similar reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to user profiles, but only allows a user to create their own profile.
     * @path /users/{userId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == userId
     * @deny (update): if true
     * @deny (delete): if true
     * @principle Public read, owner-only create. Enforces identity on create.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own FCM tokens.
     * @path /users/{userId}/fcmTokens/{tokenId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @deny (create): if request.resource.data.uid != userId;
     * @deny (update): if request.resource.data.uid != resource.data.uid;
     * @principle Owner-only access to FCM tokens.
     */
    match /users/{userId}/fcmTokens/{tokenId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, list, create, update, delete): if isOwner(userId)
     * @principle Owner-only access to notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
        allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own player profile.
     * @path /players/{playerId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == request.resource.data.ownerUid
     * @allow (update, delete): if resource.data.ownerUid == request.auth.uid
     * @principle Owner-only writes, public reads.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update: if isExistingOwner(resource.data.ownerUid);
      allow delete: if isExistingOwner(resource.data.ownerUid);
    }

    /**
     * @description Allows access to OVR history only for the player's owner.
     * @path /players/{playerId}/ovrHistory/{historyId}
     * @allow (get, list, create, update, delete): if get(/databases/$(database)/documents/players/$(playerId)).data.ownerUid == request.auth.uid
     * @principle Owner-only access.
     */
    match /players/{playerId}/ovrHistory/{historyId} {
        allow get, list, create, update, delete: if get(/databases/$(database)/documents/players/$(playerId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Allows a group owner to manage the group. Members can read group details.
     * @path /groups/{groupId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == request.resource.data.ownerUid
     * @allow (update, delete): if resource.data.ownerUid == request.auth.uid
     * @principle Owner-only writes, public reads.
     */
    match /groups/{groupId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update: if isExistingOwner(resource.data.ownerUid);
      allow delete: if isExistingOwner(resource.data.ownerUid);
    }

    /**
     * @description Allows a match owner to manage the match, and group members to view it.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == request.resource.data.ownerUid
     * @allow (update, delete): if resource.data.ownerUid == request.auth.uid
     * @principle Owner-only writes, public reads.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update: if isExistingOwner(resource.data.ownerUid);
      allow delete: if isExistingOwner(resource.data.ownerUid);
    }

    /**
     * @description Allows a user to manage their own evaluation assignments for a match.
     * @path /matches/{matchId}/assignments/{assignmentId}
     * @allow (get, list, create, update, delete): if request.auth.uid == request.resource.data.evaluatorId
     * @principle Owner-only access.
     */
    match /matches/{matchId}/assignments/{assignmentId} {
        allow get, list, create, update, delete: if request.auth.uid == request.resource.data.evaluatorId;
    }

     /**
      * @description Allows a user to create/update their own self-evaluation for a specific match.
      * @path /matches/{matchId}/selfEvaluations/{userId}
      * @allow (get, list): if true
      * @allow (create, update): if request.auth.uid == userId
      * @allow delete: if false;
      * @principle Owner-only access.
      */
     match /matches/{matchId}/selfEvaluations/{userId} {
        allow get, list: if true;
        allow create, update: if request.auth.uid == userId;
        allow delete: if false;
    }

    /**
     * @description Allows group members to create chat messages, and anyone to read them.
     * @path /matches/{matchId}/messages/{messageId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow update, delete: if false
     * @principle Public read, signed-in user writes.
     */
    match /matches/{matchId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read an evaluation, but only allows the evaluator to create it.
     * @path /evaluations/{evaluationId}
     * @allow get, list: if true
     * @allow create: if request.auth.uid == request.resource.data.evaluatorId
     * @allow update, delete: if false
     * @principle Public read, owner-only create.
     */
    match /evaluations/{evaluationId} {
        allow get, list: if true;
        allow create: if request.auth.uid == request.resource.data.evaluatorId;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Placeholder for unimplemented rules. Prevents accidental open access.
     * @path /unsecured/{document}
     * @allow get, list, create, update, delete: if false
     * @principle Explicit denial.
     */
    match /unsecured/{document} {
      allow get, list, create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(ownerUid) {
      return isSignedIn() && request.auth.uid == ownerUid && resource != null;
  }
}